// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// - protoc-gen-go-http v2.5.3
// - protoc             v3.19.4
// source: tag/v1/tag.proto

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

const OperationTagGetTags = "/api.tag.v1.Tag/GetTags"

type TagHTTPServer interface {
	GetTags(context.Context, *GetTagRequest) (*GetTagReply, error)
}

func RegisterTagHTTPServer(s *http.Server, srv TagHTTPServer) {
	r := s.Route("/")
	r.GET("/api/tags", _Tag_GetTags0_HTTP_Handler(srv))
}

func _Tag_GetTags0_HTTP_Handler(srv TagHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetTagRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, OperationTagGetTags)
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetTags(ctx, req.(*GetTagRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetTagReply)
		return ctx.Result(200, reply)
	}
}

type TagHTTPClient interface {
	GetTags(ctx context.Context, req *GetTagRequest, opts ...http.CallOption) (rsp *GetTagReply, err error)
}

type TagHTTPClientImpl struct {
	cc *http.Client
}

func NewTagHTTPClient(client *http.Client) TagHTTPClient {
	return &TagHTTPClientImpl{client}
}

func (c *TagHTTPClientImpl) GetTags(ctx context.Context, in *GetTagRequest, opts ...http.CallOption) (*GetTagReply, error) {
	var out GetTagReply
	pattern := "/api/tags"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation(OperationTagGetTags))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
